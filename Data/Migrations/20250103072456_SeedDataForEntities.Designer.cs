// <auto-generated />
using System;
using Demo3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Demo3.Data.Migrations
{
    [DbContext(typeof(CourseDbContext))]
    [Migration("20250103072456_SeedDataForEntities")]
    partial class SeedDataForEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Demo3.Data.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Music",
                            Type = 0
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Sports",
                            Type = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Theater",
                            Type = 1
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "OperaHouse",
                            Type = 4
                        });
                });

            modelBuilder.Entity("Demo3.Data.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Demo3.Data.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Email = "johndoe@example.com",
                            Name = "John Doe",
                            Type = 0
                        },
                        new
                        {
                            CustomerId = 2,
                            Email = "janesmith@example.com",
                            Name = "Jane Smith",
                            Type = 1
                        },
                        new
                        {
                            CustomerId = 3,
                            Email = "alice.johnson@example.com",
                            Name = "Alice Johnson",
                            Type = 0
                        },
                        new
                        {
                            CustomerId = 4,
                            Email = "bob.brown@example.com",
                            Name = "Bob Brown",
                            Type = 3
                        });
                });

            modelBuilder.Entity("Demo3.Data.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");

                    b.HasDiscriminator<string>("EventType").HasValue("Event");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            CategoryId = 1,
                            Date = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RowVersion = new byte[] { 0, 0, 0, 0 },
                            Status = 0,
                            Title = "Music Concert 2025",
                            VenueId = 1
                        },
                        new
                        {
                            EventId = 2,
                            CategoryId = 2,
                            Date = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RowVersion = new byte[] { 0, 0, 0, 1 },
                            Status = 0,
                            Title = "Tech Workshop",
                            VenueId = 2
                        },
                        new
                        {
                            EventId = 3,
                            CategoryId = 1,
                            Date = new DateTime(2025, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RowVersion = new byte[] { 0, 0, 0, 2 },
                            Status = 0,
                            Title = "Music Event 2025",
                            VenueId = 1
                        });
                });

            modelBuilder.Entity("Demo3.Data.Entities.EventPerformer", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("PerformerId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("EventId", "PerformerId");

                    b.HasIndex("PerformerId");

                    b.ToTable("EventPerformers");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            PerformerId = 1,
                            Role = 0
                        },
                        new
                        {
                            EventId = 1,
                            PerformerId = 2,
                            Role = 3
                        },
                        new
                        {
                            EventId = 2,
                            PerformerId = 3,
                            Role = 0
                        },
                        new
                        {
                            EventId = 2,
                            PerformerId = 4,
                            Role = 4
                        });
                });

            modelBuilder.Entity("Demo3.Data.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Demo3.Data.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CustomerId = 1,
                            OrderDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RowVersion = new byte[] { 0, 0, 0, 0 },
                            Status = 0
                        },
                        new
                        {
                            OrderId = 2,
                            CustomerId = 2,
                            OrderDate = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RowVersion = new byte[] { 0, 0, 0, 1 },
                            Status = 2
                        },
                        new
                        {
                            OrderId = 3,
                            CustomerId = 3,
                            OrderDate = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RowVersion = new byte[] { 0, 0, 0, 2 },
                            Status = 3
                        });
                });

            modelBuilder.Entity("Demo3.Data.Entities.Performer", b =>
                {
                    b.Property<int>("PerformerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformerId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("PerformerId");

                    b.ToTable("Performers");

                    b.HasData(
                        new
                        {
                            PerformerId = 1,
                            Name = "John Doe",
                            Type = 0
                        },
                        new
                        {
                            PerformerId = 2,
                            Name = "Emily Davis",
                            Type = 4
                        },
                        new
                        {
                            PerformerId = 3,
                            Name = "Michael Smith",
                            Type = 2
                        });
                });

            modelBuilder.Entity("Demo3.Data.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("EventId");

                    b.HasIndex("OrderId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            EventId = 1,
                            Price = 50.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0 },
                            Type = 0
                        },
                        new
                        {
                            TicketId = 2,
                            EventId = 1,
                            OrderId = 1,
                            Price = 100.00m,
                            RowVersion = new byte[] { 0, 0, 0, 1 },
                            Type = 0
                        },
                        new
                        {
                            TicketId = 3,
                            EventId = 2,
                            Price = 75.00m,
                            RowVersion = new byte[] { 0, 0, 0, 2 },
                            Type = 2
                        });
                });

            modelBuilder.Entity("Demo3.Data.Entities.TicketBase", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TicketType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("TicketId");

                    b.HasIndex("EventId");

                    b.ToTable("TicketBase");

                    b.HasDiscriminator<string>("TicketType").HasValue("Ticket");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Demo3.Data.Entities.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            VenueId = 1,
                            Location = "Hanoi, Vietnam",
                            Name = "Hanoi Concert Hall",
                            RowVersion = new byte[] { 0, 0, 0, 0 },
                            Type = 0
                        },
                        new
                        {
                            VenueId = 2,
                            Location = "Ho Chi Minh City, Vietnam",
                            Name = "Ho Chi Minh Stadium",
                            RowVersion = new byte[] { 0, 0, 0, 1 },
                            Type = 2
                        },
                        new
                        {
                            VenueId = 3,
                            Location = "Da Nang, Vietnam",
                            Name = "Da Nang Opera House",
                            RowVersion = new byte[] { 0, 0, 0, 2 },
                            Type = 3
                        },
                        new
                        {
                            VenueId = 4,
                            Location = "Hue, Vietnam",
                            Name = "Hue Cultural Center",
                            RowVersion = new byte[] { 0, 0, 0, 3 },
                            Type = 3
                        });
                });

            modelBuilder.Entity("Demo3.Data.Entities.Concert", b =>
                {
                    b.HasBaseType("Demo3.Data.Entities.Event");

                    b.Property<string>("Performer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Concert");
                });

            modelBuilder.Entity("Demo3.Data.Entities.Workshop", b =>
                {
                    b.HasBaseType("Demo3.Data.Entities.Event");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Workshop");
                });

            modelBuilder.Entity("Demo3.Data.Entities.ConcertTicket", b =>
                {
                    b.HasBaseType("Demo3.Data.Entities.TicketBase");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ConcertTicket");

                    b.HasData(
                        new
                        {
                            TicketId = 4,
                            EventId = 1,
                            Price = 120.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0 },
                            SeatNumber = "A1"
                        });
                });

            modelBuilder.Entity("Demo3.Data.Entities.VipTicket", b =>
                {
                    b.HasBaseType("Demo3.Data.Entities.TicketBase");

                    b.Property<string>("LoungeAccess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("VipTicket");

                    b.HasData(
                        new
                        {
                            TicketId = 5,
                            EventId = 2,
                            Price = 200.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0 },
                            LoungeAccess = "Gold Lounge"
                        });
                });

            modelBuilder.Entity("Demo3.Data.Entities.Event", b =>
                {
                    b.HasOne("Demo3.Data.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo3.Data.Entities.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Demo3.Data.Entities.EventPerformer", b =>
                {
                    b.HasOne("Demo3.Data.Entities.Event", "Event")
                        .WithMany("EventPerformers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo3.Data.Entities.Performer", "Performer")
                        .WithMany("EventPerformers")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Performer");
                });

            modelBuilder.Entity("Demo3.Data.Entities.Lesson", b =>
                {
                    b.HasOne("Demo3.Data.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Demo3.Data.Entities.Order", b =>
                {
                    b.HasOne("Demo3.Data.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Demo3.Data.Entities.Ticket", b =>
                {
                    b.HasOne("Demo3.Data.Entities.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo3.Data.Entities.Order", "Order")
                        .WithMany("Tickets")
                        .HasForeignKey("OrderId");

                    b.Navigation("Event");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Demo3.Data.Entities.TicketBase", b =>
                {
                    b.HasOne("Demo3.Data.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Demo3.Data.Entities.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Demo3.Data.Entities.Course", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Demo3.Data.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Demo3.Data.Entities.Event", b =>
                {
                    b.Navigation("EventPerformers");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Demo3.Data.Entities.Order", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Demo3.Data.Entities.Performer", b =>
                {
                    b.Navigation("EventPerformers");
                });

            modelBuilder.Entity("Demo3.Data.Entities.Venue", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
